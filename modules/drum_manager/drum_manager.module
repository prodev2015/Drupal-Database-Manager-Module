<?php

/**
 * @file
 * Drums Drupal 8 Example Module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_menu().
 */
function drum_manager_array() {
  return [
    'admin/content/drums' => [
      'title' => 'Drums list',
      'route_name' => 'drums_list',
    ],
    'admin/content/drums/add' => [
      'title' => 'Drum Add',
      'route_name' => 'drums_add',
    ],
    'admin/content/drums/delete/%' => [
      'title' => 'Delete Drum',
      'route_name' => 'drums_delete',
    ],
    'admin/content/texture_groups' => [
      'title' => 'Texture Groups list',
      'route_name' => 'texture_groups_list',
    ],
    'admin/content/texture_groups/add' => [
      'title' => 'Texture Group Add',
      'route_name' => 'texture_groups_add',
    ],
    'admin/content/texture_groups/delete/%' => [
      'title' => 'Delete Texture Group',
      'route_name' => 'texture_groups_delete',
    ],
  ];
}

/**
 * Implements hook_help().
 */
function drums_manager_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name === 'help.page.drums') {
    $readme_file = file_exists(__DIR__ . '/README.md') ? __DIR__ . '/README.md' : __DIR__ . '/README.txt';
    if (!file_exists($readme_file)) {
      return NULL;
    }
    $text = file_get_contents($readme_file);
    if ($text && !\Drupal::moduleHandler()->moduleExists('markdown')) {
      return '<pre>' . $text . '</pre>';
    }
    else {
      // Use the Markdown filter to render the README.
      $filter_manager = \Drupal::service('plugin.manager.filter');
      $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
      $config = ['settings' => $settings];
      $filter = $filter_manager->createInstance('markdown', $config);
      return $filter->process($text, 'en');
    }
  }
  return NULL;
}

/**
 * Implements hook_permission().
 */
function drum_manager_permission() {
  return [
    'manage drums forms' => [
      'title' => t('Manage drums form submissions'),
    ],
    'use drums form' => [
      'title' => t('Use the drums form'),
    ],
  ];
}

/**
 * Implements hook_preprocess().
 */

function drum_manager_preprocess_image_widget(&$variables) {
  $element = $variables['element'];

  $variables['attributes'] = array('class' => array('image-widget', 'js-form-managed-file', 'form-managed-file', 'clearfix'));

  if (!empty($element['fids']['#value'])) {
    $file = reset($element['#files']);
    $element['file_' . $file->id()]['filename']['#suffix'] = ' <span class="file-size">(' . format_size($file->getSize()) . ')</span> ';
    $file_variables = array(
      'style_name' => $element['#preview_image_style'],
      'uri' => $file->getFileUri(),
    );

    // Determine image dimensions.
    if (isset($element['#value']['width']) && isset($element['#value']['height'])) {
      $file_variables['width'] = $element['#value']['width'];
      $file_variables['height'] = $element['#value']['height'];
    } else {
      $image = \Drupal::service('image.factory')->get($file->getFileUri());
      if ($image->isValid()) {
        $file_variables['width'] = $image->getWidth();
        $file_variables['height'] = $image->getHeight();
      }
      else {
        $file_variables['width'] = $file_variables['height'] = NULL;
      }
    }

    $element['preview'] = array(
      '#weight' => -10,
      '#theme' => 'image_style',
      '#width' => $file_variables['width'],
      '#height' => $file_variables['height'],
      '#style_name' => $file_variables['style_name'],
      '#uri' => $file_variables['uri'],
    );

    // Store the dimensions in the form so the file doesn't have to be
    // accessed again. This is important for remote files.
    $element['width'] = array(
      '#type' => 'hidden',
      '#value' => $file_variables['width'],
    );
    $element['height'] = array(
      '#type' => 'hidden',
      '#value' => $file_variables['height'],
    );
  }

  $variables['data'] = array();
  foreach (\Drupal\Core\Render\Element::children($element) as $child) {
    $variables['data'][$child] = $element[$child];
  }
}

/**
 * Implements hook_page_attachments().
 */
function drum_manager_page_attachments(array &$page) {
  global $base_root, $base_path;
  $page['#attached']['drupalSettings']['basePath'] = $base_root . $base_path . drupal_get_path('module', 'drum_manager');
}

/**
 * Implements hook_theme().
 */
function drum_manager_theme($existing, $type, $theme, $path) {

  $variables = array(
    'bloque' =>array(
      'variables' => NULL,
      'template' => 'bloque',
    ),
  );

  return $variables;

}
